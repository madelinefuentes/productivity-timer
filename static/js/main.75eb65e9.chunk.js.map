{"version":3,"sources":["Timer.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","useState","elapsedTime","setElapsedTime","startTime","setStartTime","timerOn","setTimerOn","pomodoro","setPomodoro","getRemainingTime","time","focusTime","breakTime","Math","floor","useEffect","start","Date","now","timer","setInterval","clearInterval","Row","Col","style","paddingTop","xs","className","ButtonGroup","toggle","ToggleButton","type","variant","name","checked","onChange","value","margin","width","height","percent","textSize","textOffsetX","textOffsetY","textRenderer","fontSize","riseAnimation","riseAnimationTime","waveAnimation","outerRadius","waveFrequency","waveAmplitude","circleStyle","fill","waveStyle","textStyle","fontFamily","waveTextStyle","onClick","Header","showSettings","setShowSettings","ls","get","setFocusTime","setBreakTime","closeSettings","Navbar","bg","md","span","offset","Brand","fontWeight","offsetRight","color","Modal","show","onHide","closeButton","Title","Body","Container","fluid","paddingRight","e","target","set","length","id","htmlFor","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75eb65e9.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {Row, Col, ButtonGroup, ToggleButton} from 'react-bootstrap';\r\nimport LiquidFillGauge from 'react-liquid-gauge';\r\n\r\nfunction Timer(props) {\r\n    const [elapsedTime, setElapsedTime] = useState(0)\r\n    const [startTime, setStartTime] = useState(0);\r\n    const [timerOn, setTimerOn] = useState(false);\r\n    const [pomodoro, setPomodoro] = useState(true);\r\n\r\n    useEffect(\r\n      () => {\r\n        var start = Date.now();\r\n        if (timerOn) {\r\n          const timer = setInterval(() => {\r\n            setElapsedTime(startTime + Math.floor((Date.now() - start)/1000))\r\n        }, 100);\r\n          return () => clearInterval(timer);\r\n        }\r\n      },\r\n      [timerOn, startTime ]\r\n    );\r\n\r\n    function startTimer(){\r\n      setTimerOn(true)\r\n    }\r\n\r\n    function pauseTimer(){\r\n      setTimerOn(false)\r\n      setStartTime(elapsedTime)\r\n    }\r\n\r\n    function startPomodoro(){\r\n      setPomodoro(true)\r\n      setTimerOn(false)\r\n      setElapsedTime(0)\r\n    }\r\n\r\n    function startBreak(){\r\n      setPomodoro(false)\r\n      setTimerOn(false)\r\n      setElapsedTime(0)\r\n    }\r\n\r\n    function getRemainingTime(){\r\n      let time;\r\n      if(pomodoro){\r\n        time = props.focusTime - elapsedTime;\r\n      }\r\n      else{\r\n        time = props.breakTime - elapsedTime;\r\n      }\r\n\r\n      return <>{Math.floor(time / 60)}:{time % 60 < 10 ? '0' + time % 60 : time % 60}</>\r\n    }\r\n\r\n    function remainingPercentage(){\r\n      if(pomodoro) return Math.floor(elapsedTime/props.focusTime * 100)\r\n      else return Math.floor(elapsedTime/props.breakTime * 100)\r\n    }\r\n\r\n    return (\r\n      <>\r\n      <Row>\r\n        <Col style = {{paddingTop: '50px'}} xs=\"col-12\" className=\"d-flex justify-content-center\">\r\n          <ButtonGroup toggle>\r\n            <ToggleButton\r\n              type=\"radio\"\r\n              variant=\"outline-secondary\"\r\n              name=\"radio\"\r\n              checked={pomodoro}\r\n              onChange={() => startPomodoro()}\r\n              value = \"1\"\r\n              className=\"shadow-none\"\r\n            >\r\n              Pomodoro\r\n            </ToggleButton>\r\n            <ToggleButton\r\n              type=\"radio\"\r\n              variant=\"outline-secondary\"\r\n              name=\"radio\"\r\n              checked={!pomodoro}\r\n              onChange={() => startBreak()}\r\n              value = \"2\"\r\n              className=\"shadow-none\"\r\n            >\r\n              Break\r\n            </ToggleButton>\r\n          </ButtonGroup>\r\n        </Col>\r\n        <Col xs=\"col-12\" className=\"d-flex justify-content-center\">\r\n          <LiquidFillGauge\r\n            style={{ margin: '0 auto'}}\r\n            value={!timerOn && elapsedTime == 0 ? 30: remainingPercentage()}\r\n            width= {250}\r\n            height={300}\r\n            percent=\"%\"\r\n            textSize={1}\r\n            textOffsetX={0}\r\n            textOffsetY={20}\r\n            textRenderer={() => {\r\n              return (\r\n                <tspan>\r\n                  <tspan style = {{fontSize: '65px'}} className=\"value\">{getRemainingTime()}</tspan>\r\n                </tspan>\r\n              );\r\n            }}\r\n            riseAnimation\r\n            riseAnimationTime={1000}\r\n            waveAnimation\r\n            outerRadius={.95}\r\n            waveFrequency={2}\r\n            waveAmplitude={timerOn ? 0 : 1}\r\n            circleStyle={{\r\n              fill: pomodoro ? \"#5AB9EA\" : \"#FFC834\"\r\n            }}\r\n            waveStyle={{\r\n              fill: pomodoro ? \"#5AB9EA\" : \"#FFC834\"\r\n            }}\r\n            textStyle={{\r\n              fill: \"#555555\",\r\n              fontFamily: 'Arial'\r\n            }}\r\n            waveTextStyle={{\r\n              fill: '#fff',\r\n              fontFamily: 'Arial'\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col xs=\"col-12\" className=\"d-flex justify-content-center\">\r\n          {timerOn ? <button style = {{width: \"100px\"}} className=\"btn btn-outline-secondary shadow-none\" onClick={()=>pauseTimer()}>Pause</button>\r\n            : <button style={{ width: \"100px\" }} className=\"btn btn-outline-secondary shadow-none\" onClick={() => startTimer()}>Start</button>}\r\n        </Col>\r\n      </Row>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Timer","import {Navbar, Row, Col, Modal, Container} from 'react-bootstrap';\r\nimport {useState} from 'react'\r\nimport Timer from './Timer'\r\nimport ls from 'local-storage'\r\nimport '../src/styling/Header.scss'\r\n\r\nfunction Header() {\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [focusTime, setFocusTime] = useState(ls.get('focusTime') || 25);\r\n  const [breakTime, setBreakTime] = useState(ls.get('breakTime') || 5);\r\n  const [autoStartBreak, setAutoStartBreak] = useState(false)\r\n\r\n  function openSettings(){\r\n    setShowSettings(true)\r\n  }\r\n\r\n  function closeSettings(){\r\n    setShowSettings(false)\r\n  }\r\n\r\n  function updateFocusTime(e){\r\n    setFocusTime(e.target.value)\r\n    ls.set('focusTime', e.target.value)\r\n  }\r\n\r\n  function updateBreakTime(e){\r\n    setBreakTime(e.target.value)\r\n    ls.set('breakTime', e.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n          <Col md={{ span: 4, offset: 2 }} className=\"d-flex justify-content-center\">\r\n            <Navbar.Brand style={{ fontWeight: '300' }}> Productivity Timer</Navbar.Brand>\r\n          </Col>\r\n          <Col md={{ span: 4, offsetRight: 2 }} className=\"d-flex justify-content-center\">\r\n            <button onClick = {()=>openSettings()} style={{ color: \"#555555\" }} className=\"btn btn-small shadow-none\">\r\n              <i style={{ color: \"#555555\" }} className=\"fa fa-cog fa-lg\"></i> settings</button>\r\n          </Col>\r\n        </Navbar>\r\n      </Row>\r\n      <Modal show={showSettings} onHide={closeSettings}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title style = {{color:'#bfbfbf'}}>Timer Settings</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"show-grid\" style = {{fontWeight: '700'}}>\r\n          <Container fluid>\r\n            <Row style = {{paddingTop: '10px'}}>\r\n              <Col className = \"align-items-center\">\r\n                <p style = {{color:'#555555', paddingRight:'40px'}}>Time (Minutes)</p>\r\n              </Col>\r\n              <Col>\r\n                <label style = {{color: \"#bfbfbf\"}}>Pomodoro</label>\r\n                <input onChange = {updateFocusTime} value = {focusTime} style={{width: \"90px\"}} length = \"10\" type = \"number\" className=\"form-control shadow-none\"/>\r\n              </Col>\r\n              <Col>\r\n                <label style = {{color: \"#bfbfbf\"}} >Break</label>\r\n                <input onChange = {updateBreakTime} value = {breakTime} style={{width: \"90px\"}} length = \"10\" type = \"number\" className=\"form-control shadow-none\"/>\r\n              </Col>\r\n            </Row>\r\n            <Row style = {{paddingTop: '40px'}}>\r\n              <Col>\r\n                <p style = {{color:'#555555', paddingRight:'40px'}}>Auto Start Break</p>\r\n              </Col>\r\n              <Col>\r\n                <div style= {{width:'70px'}} className='custom-control custom-switch'>\r\n                  <input\r\n                    type='checkbox'\r\n                    className='custom-control-input shadow-none'\r\n                    id='customSwitches'\r\n                  />\r\n                  <label className='custom-control-label' htmlFor='customSwitches'>\r\n                  </label>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <button className=\"btn btn-outline-secondary shadow-none\" variant=\"secondary\" onClick={closeSettings}>\r\n            Close\r\n          </button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Timer\r\n        focusTime = {focusTime * 60}\r\n        breakTime = {breakTime * 60}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default Header;","import Container from 'react-bootstrap/Container'\nimport Header from './Header'\nimport Timer from './Timer'\n\nfunction App() {\n  return (\n    <Container fluid>\n      <Header/>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}