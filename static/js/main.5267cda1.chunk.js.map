{"version":3,"sources":["Timer.js","Header.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","useState","elapsedTime","setElapsedTime","startTime","setStartTime","timerOn","setTimerOn","pomodoro","setPomodoro","currInterval","setCurrInterval","startPomodoro","startBreak","pressBreak","getRemainingTime","time","focusTime","breakTime","Math","floor","useEffect","start","Date","now","timer","setInterval","clearInterval","autoStartBreak","intervals","Row","Col","style","paddingTop","xs","className","ButtonGroup","toggle","ToggleButton","type","variant","name","checked","onChange","value","margin","width","height","percent","textSize","textOffsetX","textOffsetY","textRenderer","fontSize","riseAnimation","riseAnimationTime","waveAnimation","outerRadius","waveFrequency","waveAmplitude","circleStyle","fill","waveStyle","textStyle","fontFamily","waveTextStyle","onClick","Header","showSettings","setShowSettings","ls","get","setFocusTime","setBreakTime","setAutoStartBreak","setIntervals","closeSettings","Navbar","bg","md","span","offset","Brand","fontWeight","offsetRight","color","Modal","dialogClassName","size","show","onHide","aria-labelledby","closeButton","Title","Body","Container","e","target","set","length","marginTop","id","val","htmlFor","Footer","App","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5267cda1.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {Row, Col, ButtonGroup, ToggleButton} from 'react-bootstrap';\r\nimport LiquidFillGauge from 'react-liquid-gauge';\r\n\r\nfunction Timer(props) {\r\n    const [elapsedTime, setElapsedTime] = useState(0);\r\n    const [startTime, setStartTime] = useState(0);\r\n    const [timerOn, setTimerOn] = useState(false);\r\n    const [pomodoro, setPomodoro] = useState(true);\r\n    const [currInterval, setCurrInterval] = useState(0);\r\n\r\n    useEffect(\r\n      () => {\r\n        var start = Date.now();\r\n        if (timerOn) {\r\n          const timer = setInterval(() => {\r\n            let time = startTime + Math.floor((Date.now() - start)/1000)\r\n            setElapsedTime(time)\r\n\r\n            if(pomodoro && time === props.focusTime){\r\n              clearInterval(timer)\r\n              if(props.autoStartBreak){\r\n                startBreak();\r\n              }\r\n              else{\r\n                pressBreak();\r\n              }\r\n            } \r\n\r\n            if(!pomodoro && time === props.breakTime){\r\n              clearInterval(timer)\r\n              if(currInterval < props.intervals){\r\n                setCurrInterval(currInterval + 1);\r\n                startPomodoro();\r\n              }\r\n            }\r\n        }, 100);\r\n          return () => clearInterval(timer);\r\n        }\r\n      },\r\n      [timerOn, startTime, pomodoro, props.focusTime, props.autoStartBreak]\r\n    );\r\n\r\n    function startTimer(){\r\n      setTimerOn(true);\r\n    }\r\n\r\n    function pauseTimer(){\r\n      setTimerOn(false);\r\n      setStartTime(elapsedTime);\r\n    }\r\n\r\n    function startPomodoro(){\r\n      setPomodoro(true);\r\n      setStartTime(0)\r\n      setElapsedTime(0);\r\n    }\r\n\r\n    function startBreak(){\r\n      setPomodoro(false);\r\n      setStartTime(0)\r\n      setElapsedTime(0);\r\n    }\r\n\r\n    function pressPomodoro(){\r\n      setTimerOn(false);\r\n      startPomodoro();\r\n    }\r\n\r\n    function pressBreak(){\r\n      setTimerOn(false);\r\n      startBreak();\r\n    }\r\n\r\n    function getRemainingTime(){\r\n      let time;\r\n      if(pomodoro){\r\n        time = props.focusTime - elapsedTime;\r\n      }\r\n      else{\r\n        time = props.breakTime - elapsedTime;\r\n      }\r\n\r\n      return <>{Math.floor(time / 60)}:{time % 60 < 10 ? '0' + time % 60 : time % 60}</>\r\n    }\r\n\r\n    function remainingPercentage(){\r\n      if(pomodoro) return Math.floor(elapsedTime/props.focusTime * 100)\r\n      else return Math.floor(elapsedTime/props.breakTime * 100)\r\n    }\r\n\r\n    return (\r\n      <>\r\n      <Row>\r\n        <Col style = {{paddingTop: '50px'}} xs=\"col-12\" className=\"d-flex justify-content-center\">\r\n          <ButtonGroup toggle>\r\n            <ToggleButton\r\n              type=\"radio\"\r\n              variant=\"outline-secondary\"\r\n              name=\"radio\"\r\n              checked={pomodoro}\r\n              onChange={() => pressPomodoro()}\r\n              value = \"1\"\r\n              className=\"shadow-none\"\r\n            >\r\n              Pomodoro\r\n            </ToggleButton>\r\n            <ToggleButton\r\n              type=\"radio\"\r\n              variant=\"outline-secondary\"\r\n              name=\"radio\"\r\n              checked={!pomodoro}\r\n              onChange={() => pressBreak()}\r\n              value = \"2\"\r\n              className=\"shadow-none\"\r\n            >\r\n              Break\r\n            </ToggleButton>\r\n          </ButtonGroup>\r\n        </Col>\r\n        <Col xs=\"col-12\" className=\"d-flex justify-content-center\">\r\n          <LiquidFillGauge\r\n            style={{ margin: '0 auto'}}\r\n            value={!timerOn && elapsedTime === 0 ? 30: remainingPercentage()}\r\n            width= {250}\r\n            height={300}\r\n            percent=\"%\"\r\n            textSize={1}\r\n            textOffsetX={0}\r\n            textOffsetY={20}\r\n            textRenderer={() => {\r\n              return (\r\n                <tspan>\r\n                  <tspan style = {{fontSize: '65px'}} className=\"value\">{getRemainingTime()}</tspan>\r\n                </tspan>\r\n              );\r\n            }}\r\n            riseAnimation\r\n            riseAnimationTime={1000}\r\n            waveAnimation\r\n            outerRadius={.95}\r\n            waveFrequency={2}\r\n            waveAmplitude={timerOn ? 0 : 1}\r\n            circleStyle={{\r\n              fill: pomodoro ? \"#5AB9EA\" : \"#FFC834\"\r\n            }}\r\n            waveStyle={{\r\n              fill: pomodoro ? \"#5AB9EA\" : \"#FFC834\"\r\n            }}\r\n            textStyle={{\r\n              fill: \"#555555\",\r\n              fontFamily: 'Arial'\r\n            }}\r\n            waveTextStyle={{\r\n              fill: '#fff',\r\n              fontFamily: 'Arial'\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col xs=\"col-12\" className=\"d-flex justify-content-center\">\r\n          {timerOn ? <button style = {{width: \"100px\"}} className=\"btn btn-outline-secondary shadow-none\" onClick={()=>pauseTimer()}>Pause</button>\r\n            : <button style={{ width: \"100px\" }} className=\"btn btn-outline-secondary shadow-none\" onClick={() => startTimer()}>Start</button>}\r\n        </Col>\r\n      </Row>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Timer","import {Navbar, Row, Col, Modal, Container} from 'react-bootstrap';\r\nimport {useState} from 'react'\r\nimport Timer from './Timer'\r\nimport ls from 'local-storage'\r\nimport '../src/styling/Header.scss'\r\n\r\nfunction Header() {\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [focusTime, setFocusTime] = useState(ls.get('focusTime') || 25);\r\n  const [breakTime, setBreakTime] = useState(ls.get('breakTime') || 5);\r\n  const [autoStartBreak, setAutoStartBreak] = useState(ls.get('autoBreak') == 1 ? true : false);\r\n  const [intervals, setIntervals] = useState(ls.get('intervals') || 0);\r\n\r\n  function openSettings(){\r\n    setShowSettings(true)\r\n  }\r\n\r\n  function closeSettings(){\r\n    setShowSettings(false)\r\n  }\r\n\r\n  function updateFocusTime(e){\r\n    setFocusTime(e.target.value)\r\n    ls.set('focusTime', e.target.value)\r\n  }\r\n\r\n  function updateBreakTime(e){\r\n    setBreakTime(e.target.value)\r\n    ls.set('breakTime', e.target.value)\r\n  }\r\n\r\n  function updateIntervals(e){\r\n    setIntervals(e.target.value)\r\n    ls.set('intervals', e.target.value)\r\n  }\r\n\r\n  function updateAutoBreak(){\r\n    setAutoStartBreak(!autoStartBreak)\r\n    let val = autoStartBreak ? 0 : 1;\r\n    ls.set('autoBreak', val)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Navbar bg=\"light\" variant=\"light\">\r\n          <Col md={{ span: 4, offset: 2 }} className=\"d-flex justify-content-center\">\r\n            <Navbar.Brand style={{ fontWeight: '300' }}> Productivity Timer</Navbar.Brand>\r\n          </Col>\r\n          <Col md={{ span: 4, offsetRight: 2 }} className=\"d-flex justify-content-center\">\r\n            <button onClick = {()=>openSettings()} style={{ color: \"#555555\" }} className=\"btn btn-small shadow-none\">\r\n              <i style={{ color: \"#555555\" }} className=\"fa fa-cog fa-lg\"></i><span className=\"d-none d-sm-inline\"> settings</span></button>\r\n          </Col>\r\n        </Navbar>\r\n      </Row>\r\n      <Modal dialogClassName='modal-container' size = \"sm\" show={showSettings} onHide={closeSettings} aria-labelledby=\"contained-modal-title-vcenter\">\r\n        <Modal.Header closeButton>\r\n          <Modal.Title style = {{color:'#bfbfbf'}}>Timer Settings</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"show-grid\" style = {{fontWeight: '700'}}>\r\n          <Container>\r\n            <Row className=\"align-items-center\">\r\n              <Col>\r\n                <div>\r\n                  <label style = {{color: \"#555555\"}}>Pomodoro</label>\r\n                  <input onChange = {updateFocusTime} value = {focusTime} style={{width: \"90px\"}} length = \"10\" type = \"number\" className=\"form-control shadow-none\"/>\r\n                </div>\r\n              </Col>\r\n              <Col className = \"d-flex justify-content-end\">\r\n                <div>\r\n                  <label style = {{color: \"#555555\"}} >Break</label>\r\n                  <input onChange = {updateBreakTime} value = {breakTime} style={{width: \"90px\"}} length = \"10\" type = \"number\" className=\"form-control shadow-none\"/>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row style = {{marginTop: \"20px\"}} className=\"align-items-center border-top\">\r\n              <Col style = {{marginTop: \"10px\"}}>\r\n                <div style = {{color:'#555555'}}>Auto Start Break</div>\r\n              </Col>\r\n              <Col className = \"d-flex justify-content-end\">\r\n                <div className='custom-control custom-switch'>\r\n                  <input\r\n                    type='checkbox'\r\n                    className='custom-control-input shadow-none'\r\n                    id='customSwitches'\r\n                    checked = {autoStartBreak}\r\n                    onChange = {updateAutoBreak}\r\n                  />\r\n                  <label className='custom-control-label' htmlFor='customSwitches'>\r\n                  </label>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row style = {{marginTop: \"20px\"}} className=\"align-items-center border-top\">\r\n              <Col style = {{marginTop: \"10px\"}}>\r\n                <div style = {{color:'#555555'}}>Auto Start Intervals</div>\r\n              </Col>\r\n              <Col className = \"d-flex justify-content-end\">\r\n                <input onChange = {updateIntervals} value = {intervals} style={{width: \"70px\"}} length = \"2\" type = \"number\" className=\"form-control shadow-none\"/>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <button className=\"btn btn-outline-secondary shadow-none\" variant=\"secondary\" onClick={closeSettings}>\r\n            Close\r\n          </button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Timer\r\n        focusTime = {focusTime * 60}\r\n        breakTime = {breakTime * 60}\r\n        autoStartBreak = {autoStartBreak}\r\n        intervals = {intervals}\r\n      />\r\n    </>\r\n  );\r\n}\r\n  \r\nexport default Header;","import Container from 'react-bootstrap/Container'\nimport Header from './Header'\n\nfunction App() {\n  return (\n    <Container fluid>\n      <Header/>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}